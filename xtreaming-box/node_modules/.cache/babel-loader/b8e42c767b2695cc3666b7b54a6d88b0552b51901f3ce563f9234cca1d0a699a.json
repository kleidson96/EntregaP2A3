{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mateu\\\\Documents\\\\GitHub\\\\EntregaP2A3\\\\xtreaming-box\\\\src\\\\contexts\\\\Auth\\\\AuthProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { AuthContext } from \"./AuthContext\";\nimport { connectAPI } from \"./connectAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // Função para salvar usuário que está logado\n  const [user, setUser] = useState(null);\n\n  //Conexão com API\n  const api = connectAPI();\n\n  //Colocar o token no local storage para persistência de usuário logado.\n  const setToken = () => {\n    const token = api.createToken();\n    const authToken = token.toString();\n    localStorage.setItem('authToken', authToken);\n  };\n\n  //Verificação de usuário \n  const entrar = async (email, senha) => {\n    const dadosLogin = await api.login();\n    const filtered = dadosLogin.filter(obj => {\n      return obj.email === email;\n    });\n    if (filtered.length > 0 && filtered[0].senha === senha) {\n      const emailFiltrado = filtered[0];\n      setUser(emailFiltrado);\n      setToken();\n      localStorage.setItem('emailFiltrado', JSON.stringify(emailFiltrado));\n      return true;\n    }\n    return false;\n  };\n\n  // Fazer logoff\n  const sair = () => {\n    api.logout();\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      entrar,\n      sair\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","AuthContext","connectAPI","jsxDEV","_jsxDEV","AuthProvider","_ref","_s","children","user","setUser","api","setToken","token","createToken","authToken","toString","localStorage","setItem","entrar","email","senha","dadosLogin","login","filtered","filter","obj","length","emailFiltrado","JSON","stringify","sair","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Mateu/Documents/GitHub/EntregaP2A3/xtreaming-box/src/contexts/Auth/AuthProvider.tsx"],"sourcesContent":["import React,  { useEffect, useState } from \"react\";\r\nimport { User } from \"../../types/User\";\r\nimport { AuthContext } from \"./AuthContext\";\r\nimport  {connectAPI} from \"./connectAPI\";\r\n \r\nexport const AuthProvider = ({children}: {children: JSX.Element}) => {\r\n    // Função para salvar usuário que está logado\r\n    const [user, setUser] = useState <User | null> (null);\r\n\r\n    //Conexão com API\r\n    const api = connectAPI();\r\n\r\n    \r\n\r\n    //Colocar o token no local storage para persistência de usuário logado.\r\n    const setToken = () =>{\r\n        const token:number = api.createToken()\r\n        const authToken:string = token.toString();\r\n        localStorage.setItem('authToken', authToken);\r\n    }\r\n\r\n    //Verificação de usuário \r\n    const entrar = async (email: string, senha: string) => {\r\n        interface dados {\r\n            nome_completo: string;\r\n            email: string;\r\n            senha: string;\r\n            confirm_senha: string;\r\n        }\r\n        const dadosLogin: dados [] = await api.login();\r\n\r\n        const filtered = dadosLogin.filter((obj) => {\r\n            return obj.email === email;                \r\n        });\r\n\r\n        if(filtered.length > 0 && filtered[0].senha === senha){\r\n            const emailFiltrado = filtered[0];\r\n            setUser(emailFiltrado);\r\n            setToken();\r\n            localStorage.setItem('emailFiltrado', JSON.stringify(emailFiltrado));\r\n            return true;\r\n        }\r\n        return false;   \r\n    }\r\n\r\n    // Fazer logoff\r\n    const sair = () => {\r\n        api.logout();\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={{user, entrar, sair}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAgBC,QAAQ,QAAQ,OAAO;AAEnD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,UAAU,QAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,OAAO,MAAMC,YAAY,GAAGC,IAAA,IAAyC;EAAAC,EAAA;EAAA,IAAxC;IAACC;EAAiC,CAAC,GAAAF,IAAA;EAC5D;EACA,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;;EAErD;EACA,MAAMW,GAAG,GAAGT,UAAU,CAAC,CAAC;;EAIxB;EACA,MAAMU,QAAQ,GAAGA,CAAA,KAAK;IAClB,MAAMC,KAAY,GAAGF,GAAG,CAACG,WAAW,CAAC,CAAC;IACtC,MAAMC,SAAgB,GAAGF,KAAK,CAACG,QAAQ,CAAC,CAAC;IACzCC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEH,SAAS,CAAC;EAChD,CAAC;;EAED;EACA,MAAMI,MAAM,GAAG,MAAAA,CAAOC,KAAa,EAAEC,KAAa,KAAK;IAOnD,MAAMC,UAAoB,GAAG,MAAMX,GAAG,CAACY,KAAK,CAAC,CAAC;IAE9C,MAAMC,QAAQ,GAAGF,UAAU,CAACG,MAAM,CAAEC,GAAG,IAAK;MACxC,OAAOA,GAAG,CAACN,KAAK,KAAKA,KAAK;IAC9B,CAAC,CAAC;IAEF,IAAGI,QAAQ,CAACG,MAAM,GAAG,CAAC,IAAIH,QAAQ,CAAC,CAAC,CAAC,CAACH,KAAK,KAAKA,KAAK,EAAC;MAClD,MAAMO,aAAa,GAAGJ,QAAQ,CAAC,CAAC,CAAC;MACjCd,OAAO,CAACkB,aAAa,CAAC;MACtBhB,QAAQ,CAAC,CAAC;MACVK,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEW,IAAI,CAACC,SAAS,CAACF,aAAa,CAAC,CAAC;MACpE,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB,CAAC;;EAED;EACA,MAAMG,IAAI,GAAGA,CAAA,KAAM;IACfpB,GAAG,CAACqB,MAAM,CAAC,CAAC;EAChB,CAAC;EACD,oBACI5B,OAAA,CAACH,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAACzB,IAAI;MAAEU,MAAM;MAAEY;IAAI,CAAE;IAAAvB,QAAA,EAC7CA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAA/B,EAAA,CAjDYF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}